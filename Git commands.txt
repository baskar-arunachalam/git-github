verso2
git -- version
git config --global user.name "Baskar,Arunachalam"
git config --global user.email "baskar.arunachalam@gmail.com"

git config --global list
cat `/.gitconfig
=======
git config --list
git help
git help add
git help rebase
    
git init  - to initialize a directory for git repository
ls -la - to view hidden files
git status
git add . -  to add files
git commit -m  "My first commit"

git log
git log --author="Baskar,Arunachalam"
git config --global core.editor "\"C:\Program Files (x86)\Notepad++\notepad++.exe\""
git diff
git diff --staged
git -rm $filename

--------------  GitHub -----------------------
git init
git remote add origin ""
git pull origin master
git push origin master
baskar-arunachalam

-------  Git Branches -----
Git branch $branch_name
Git checkout

------
git merge develop
--
git reset HEAD $FILE_NAME  - To revert back
git reset HEAD~ - To revert last commit
git checkout -- $filename$ to remove local changes
---------
git mv filename1 filename2 

--
git log
git log --oneline --graph --decorate
git log --since="2 days ago"
git show commitId ->   displays complete details of commit
git log -- Filename -->

----------  git alias ----------

git config --global  alias.history "log --all --oneline --graph --decorate"
subl ~/.gitconfig

------
.gitignore -  Add the files to be ignored
--------
$ git commit -m "remove added"
[master ce2ed87] remove added
 Committer: Baskar Arunachalam <baskar.arunachalam@sonata-software.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author



----- git fork ----------
open github terminal and fork the project
the project is added to your repository

--------------
git checkout -- $filename ->  To remove changes made in a file before adding into repository

git rm -rf  $foldername -> To delete directories recursively
-----------
git diff - finds differences between working directory and staging area
git diff HEAD --> compares working directory with repository

--------------  Compare Staged version  Vs GitHub -------------
git diff --staged HEAD
git diff $commitid1 $commitid2
git diff HEAD HEAD^   - Difference between  last 2 commits

------------------------ Git branch ------------

Git branch 
Git branch -a 
git branch $branchName  - to create new branch
git branch -m oldbranchname  $newBranchName   - Change branchName
git branch -d branchName - to delete a branch

--------------- git rebase --------------
git checkout featurebranch
git rebase master
Merge did an extra commit whereas rebase won't do any extra commit
if git rebase gives a merge conflict, then first use abort command
(i.e) git rebase --abort
2. git diff branchName master
3. resolve the conflict
4. git rebase --continue
5. git rebase --skip
------------------ git rebase  remote ------------------------

git fetch - Get all the changes done at the remote repository
git pull --rebase origin master
----------------------
is git stash does merging/

--------- git stash --------------
git stash
git stash list
git stash apply
git stash drop
--------------------
git ls-files  files  tracked by git

git stash -u ->  stash  untracked file
git stash -a  ->  stash all files
git stash pop ->  apply all the stashed files

---------------- stash multiple files ----------
git statsh save "Message "
 Latest changes in zero index

git stash show stash@(0)
git stash apply stash@{0} 
-----------------
git stash branch stashBranch

-----------------
git tag tagged
git tag  --list
git tag --delete
------ annoted tag -------
git tag -a "annnoted"

git diff tag1 tag2  -->   shows differences between 2 tags
git tag -a tagName $commitId
git tag -a tagname -f $newCommitid -  This  command is used to update a tag
------------------

git commit -amend -m "New message"
GIT reset --soft commitID   - This command will reset the changes after the given commitid1
git reset --hard comitid
git reflog - brings files from recycle bin

git clean -df
